---
- hosts: pulsar_manager
  gather_facts: false
  any_errors_fatal: true
  become: true
  become_method: sudo
  tasks:
    - name: Create folder "{{ tgt_pkg_dir_pm }}" 
      file:
        path: "{{ tgt_pkg_dir_pm }}"
        state: directory
        recurse: yes
        owner: "{{ pulsar_user }}"
        group: "{{ pulsar_user }}"

    - name: Download pulsar version "{{ pulsar_manager_ver }}"
      get_url:
        url: "{{ pulsar_manager_bin_download_url }}"
        dest: "{{ tgt_pkg_dir_pm }}/apache-pulsar-manager-{{ pulsar_manager_ver }}-bin.tar.gz"
        owner: "{{ pulsar_user }}"
        group: "{{ pulsar_user }}"

    - name: Create folder "{{ tgt_pulsar_mgr_inst_dir }}"
      file:
        path: "{{ tgt_pulsar_mgr_inst_dir }}"
        state: directory
        owner: "{{ pulsar_user }}"
        group: "{{ pulsar_user }}"

    - name: Extract downloaded Pulsar manager binary archive file from "apache-pulsar-manager-{{ pulsar_manager_ver }}-bin.tar.gz" to "pulsar-manager.tar"
      unarchive:
        src: "{{ tgt_pkg_dir_pm }}/apache-pulsar-manager-{{ pulsar_manager_ver }}-bin.tar.gz"
        remote_src: yes
        dest: "{{ tgt_pkg_dir_pm }}"
        extra_opts: [--strip-components=1]
        owner: "{{ pulsar_user }}"    
        group: "{{ pulsar_user }}"

    - name: Extract downloaded Pulsar manager binary archive file from "pulsar-manager.tar" to the target installation folder "{{ tgt_pulsar_mgr_inst_dir }}"
      unarchive:
        src: "{{ tgt_pkg_dir_pm }}/pulsar-manager.tar"
        remote_src: yes
        dest: "{{ tgt_pulsar_mgr_inst_dir }}"
        extra_opts: [--strip-components=1]
        owner: "{{ pulsar_user }}"    
        group: "{{ pulsar_user }}"

    - name: Copy Pulsar manager UI component to the target installation folder "{{ tgt_pulsar_mgr_inst_dir }}"
      copy:
        src: "{{ tgt_pkg_dir_pm }}/dist/"
        remote_src: yes
        dest: "{{ tgt_pulsar_mgr_inst_dir }}/ui/"
        owner: "{{ pulsar_user }}"
        group: "{{ pulsar_user }}"

    - name: Enable bookkeepr visual manager
      lineinfile:
        path: "{{ tgt_pulsar_mgr_inst_dir }}/bkvm.conf"
        regexp: "^bkvm.enabled="
        line: "bkvm.enabled=true"

    - name: Get Pulsar Manager PID
      shell: netstat -ntlp | grep {{ pulsar_mgr_webui_port }} | awk '{print $7}' | awk -F'/' '{print $1}'
      register: pm_pid_output
    #- debug: msg={{ pm_pid_output }}

    - name: Start Pulsar Manager
      become: true
      # become_method: sudo
      # become_user: "{{ pulsar_user }}"
      shell: "bin/pulsar-manager &"
      args: 
        chdir: "{{ tgt_pulsar_mgr_inst_dir }}"
      async: 120
      poll: 0
      register: pm_cmd_output
      when: pm_pid_output.stdout == ""

    - name: Wait until Pulsar manager Web UI port {{ pulsar_mgr_webui_port }} is ready
      wait_for:
        port: "{{ pulsar_mgr_webui_port }}"
        delay: 1
      when: pm_pid_output.stdout == ""

    - name: Get Pulsar manager API access token
      uri: 
        url: http://localhost:7750/pulsar-manager/csrf-token
      register: token_output
    #- debug: msg={{ token_output.x_csrf_token }}
    
    - name: Create an admin user
      vars:
        pulsar_mgr_admin_user_registration:
          name: pulsar
          password: pulsar
          email: username@test.org
      uri:
        url: http://localhost:7750/pulsar-manager/users/superuser
        method: PUT
        headers:
          X-XSRF-TOKEN: "{{ token_output.x_csrf_token }}"
          Cookie: XSRF-TOKEN={{ token_output.x_csrf_token }}
          Content-Type: application/json
        body: '{{ pulsar_mgr_admin_user_registration|to_json }}'
      register: api_put_response
    #- debug: msg={{ api_put_response }}

    - name: Add a new environment
      vars:
        pulsar_mgr_admin_user_registration:
          name: pulsar
          password: pulsar
          email: username@test.org
      uri:
        url: http://localhost:7750/pulsar-manager/users/superuser
        method: PUT
        headers:
          X-XSRF-TOKEN: "{{ token_output.x_csrf_token }}"
          Cookie: XSRF-TOKEN={{ token_output.x_csrf_token }}
          Content-Type: application/json
        body: '{{ pulsar_mgr_admin_user_registration|to_json }}'
      register: api_put_response

